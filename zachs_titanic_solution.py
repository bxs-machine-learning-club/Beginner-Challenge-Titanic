# -*- coding: utf-8 -*-
"""zachs-titanic-solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w29UdgvFWCVmomArS2FDXjH8YvZ4HA1y
"""

from google.colab import files
uploaded = files.upload()

import io
import pandas as pd

df = pd.read_csv(io.BytesIO(uploaded['train.csv']))
# Dataset is now stored in a Pandas Dataframe

df.info()

#missing data pd visualization
total_missing = df.isnull().sum().sort_values(ascending=False)
percent_missing = (100 * total_missing / len(df.index)) 
missing_df = pd.concat([total_missing, percent_missing], axis=1)
missing_df.columns = ['null values', 'percent missing']
missing_df.head()

#missing data sns
import seaborn as sns
import matplotlib.pyplot as plt

f, ax = plt.subplots(figsize=(15,9))
sns.barplot(x = missing_df.index, y = missing_df['percent missing'])
plt.xlabel('features')
plt.ylabel('percent missing')
plt.title('missing vals')
plt.show()

#drop unnecessary columns
remove_columns = ['Cabin', 'Fare', 'Ticket']
data = df.drop(columns=remove_columns)

#impute values with fill forward method
imputed_data = data.fillna(method='ffill')
imputed_data.isnull().sum().sort_values(ascending=False)

categorical_cols = list(imputed_data.select_dtypes(include='object').columns)
categorical_cols

imputed_data.head()

set(imputed_data.Embarked)

label_encoding = {'Sex': {'male': 0, 'female': 1},
                  'Embarked': {'C': 0, 'Q': 1, 'S': 2}}
imputed_data.replace(label_encoding, inplace=True)

df = imputed_data.drop(columns=['Name', 'PassengerId'])

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))
df_scaled = df.copy()
df_scaled[df.columns] = scaler.fit_transform(df_scaled)
df_scaled

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

df_scaled
#define feature and target vectors
X = df_scaled.drop(columns=['Survived'])
y = df_scaled.Survived

#train-test-split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

#fit and predict with model
clf = RandomForestClassifier()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
acc = accuracy_score(y_pred, y_test)
print('The accuracy of the model is %s' % round(100 * acc) + '%')